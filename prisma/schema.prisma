generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  accounts Account[]
  apiToken ApiToken[]
  bookmark Bookmark[]
  folder   Folder[]
  sessions Session[]
  Tag      Tag[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Bookmark {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  url         String
  title       String
  description String?
  imageUrl    String?  @map("image_url")
  visits      Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isFavorite  Boolean  @default(false) @map("is_favorite")
  iconName    String?  @map("icon_name")
  folderId    String?  @map("folder_id")

  folder      Folder?       @relation(fields: [folderId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  BookmarkTag BookmarkTag[]

  @@unique([userId, url])
  @@index([userId])
  @@index([folderId])
  @@map("bookmarks")
}

model Folder {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  parentFolderId String?  @map("parent_folder_id")
  title          String
  description    String?
  iconName       String?  @map("icon_name")
  visits         Int      @default(0)
  isFavorite     Boolean  @default(false) @map("is_favorite")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  bookmarks    Bookmark[]
  parentFolder Folder?     @relation("FolderSelfRelation", fields: [parentFolderId], references: [id])
  subFolders   Folder[]    @relation("FolderSelfRelation")
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  FolderTag    FolderTag[]

  @@index([userId])
  @@index([parentFolderId])
  @@map("folders")
}

model ApiToken {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  name      String
  token     String    @unique
  lastUsed  DateTime? @map("last_used")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@map("api_tokens")
}

model Tag {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String   @unique
  color     String   @default("blue")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  BookmarkTag BookmarkTag[]
  FolderTag   FolderTag[]

  @@index([userId])
  @@map("tags")
}

model BookmarkTag {
  id         String @id @default(cuid())
  tagId      String @map("tag_id")
  bookmarkId String @map("bookmark_id")

  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)

  @@unique([tagId, bookmarkId])
  @@map("bookmark_tag")
}

model FolderTag {
  id       String @id @default(cuid())
  tagId    String @map("tag_id")
  folderId String @map("folder_id")

  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([tagId, folderId])
  @@map("folder_tag")
}
