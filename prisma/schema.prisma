// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")
  deletedAt     DateTime?  @map("deleted_at")
  Bookmark      Bookmark[]
  ApiToken      ApiToken[]
  Folder        Folder[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Bookmark {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  folderId    String?  @map("folder_id")
  url         String
  title       String
  description String?
  imageUrl    String?  @map("image_url")
  iconName    String?  @map("icon_name")
  visits      Int      @default(0)
  isFavorite  Boolean  @default(false) @map("is_favorite")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Folder Folder? @relation(fields: [folderId], references: [id])

  @@unique([userId, url])
  @@map("bookmarks")
}

model Folder {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  parentId    String?  @map("parent_id")
  title       String
  description String?
  iconName    String?  @map("icon_name")
  visits      Int      @default(0)
  isFavorite  Boolean  @default(false) @map("is_favorite")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent     Folder?    @relation("FolderToSubfolders", fields: [parentId], references: [id])
  subfolders Folder[]   @relation("FolderToSubfolders")
  Bookmark   Bookmark[]

  @@map("folders")
}

model ApiToken {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  name      String
  token     String    @unique
  lastUsed  DateTime? @map("last_used")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("api_tokens")
}
